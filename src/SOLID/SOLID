S (Single_Responsability)

A class should have one and only one reason to change,
meaning that a class should have only one job

Open/Closed

Objects or entities should be open for extension,
but closed for modification.

Liskov

leq q(x) be a property provable about objects of x of type T.
then q(y) should be provable for objects of type S where S is a subtype of T

Interface Segregation

a client should never be forced to implement an interface that it doesn't use
or clients shouldn't be forced to depend on methods they do not use

Dependency Inversion

Entities must depend on abstractions not on concretions. It states that the
high level module must not depend on de low level module, but they should depend on abstractions



